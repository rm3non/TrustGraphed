
"""
Zero-Fabrication Protocol (ZFP)
Flags hallucinations or AI-generated anomalies.
"""

import re
from typing import List, Dict, Any

class ZeroFabricationProtocol:
    def __init__(self):
        self.name = "Zero-Fabrication Protocol"
        self.version = "1.0.0"
        self.fabrication_indicators = [
            "as an ai", "i cannot", "i don't have access",
            "according to my training", "i'm not able to",
            "generated by ai", "artificial intelligence"
        ]
        self.suspicious_patterns = [
            r'\b\d{4}\b.*\b\d{4}\b',  # Multiple years (potential date confusion)
            r'approximately \d+%',     # Vague statistics
            r'studies show that',      # Unsupported claims
            r'it is widely known',     # Appeal to common knowledge
        ]
    
    def detect_ai_artifacts(self, content: str) -> List[Dict[str, Any]]:
        """Detect potential AI-generated content artifacts."""
        artifacts = []
        content_lower = content.lower()
        
        for indicator in self.fabrication_indicators:
            if indicator in content_lower:
                artifacts.append({
                    "type": "ai_artifact",
                    "indicator": indicator,
                    "severity": "high",
                    "description": "Direct AI generation indicator found"
                })
        
        return artifacts
    
    def detect_suspicious_patterns(self, content: str) -> List[Dict[str, Any]]:
        """Detect patterns that might indicate fabricated information."""
        suspicious_items = []
        
        for pattern in self.suspicious_patterns:
            matches = re.finditer(pattern, content, re.IGNORECASE)
            for match in matches:
                suspicious_items.append({
                    "type": "suspicious_pattern",
                    "pattern": pattern,
                    "match": match.group(),
                    "severity": "medium",
                    "description": "Pattern associated with potential fabrication"
                })
        
        return suspicious_items
    
    def analyze_fact_density(self, content: str) -> float:
        """Analyze the density of factual claims vs supporting evidence."""
        words = content.split()
        total_words = len(words)
        
        # Count potential factual claims (sentences with numbers, dates, names)
        fact_patterns = [
            r'\b\d+%\b',           # Percentages
            r'\b\d{4}\b',          # Years
            r'\b[A-Z][a-z]+ [A-Z][a-z]+\b',  # Proper names
            r'\$\d+',              # Money amounts
        ]
        
        fact_count = 0
        for pattern in fact_patterns:
            fact_count += len(re.findall(pattern, content))
        
        fact_density = fact_count / max(1, total_words / 20)  # Facts per ~20 words
        return min(1.0, fact_density)
    
    def process(self, content: str) -> Dict[str, Any]:
        """Main processing function."""
        ai_artifacts = self.detect_ai_artifacts(content)
        suspicious_patterns = self.detect_suspicious_patterns(content)
        fact_density = self.analyze_fact_density(content)
        
        total_flags = len(ai_artifacts) + len(suspicious_patterns)
        
        # Calculate fabrication risk score (lower is better)
        fabrication_risk = min(1.0, total_flags * 0.2 + (1.0 - fact_density) * 0.3)
        authenticity_score = max(0.0, 1.0 - fabrication_risk)
        
        return {
            "module": self.name,
            "ai_artifacts": ai_artifacts,
            "suspicious_patterns": suspicious_patterns,
            "fact_density": round(fact_density, 3),
            "fabrication_risk": round(fabrication_risk, 3),
            "authenticity_score": round(authenticity_score, 3),
            "total_flags": total_flags,
            "status": "analyzed"
        }
